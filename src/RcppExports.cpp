// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// g
double g(double x, const NumericVector& xi, const NumericVector& u);
RcppExport SEXP _monotoneSIM_g(SEXP xSEXP, SEXP xiSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(g(x, xi, u));
    return rcpp_result_gen;
END_RCPP
}
// update_beta
List update_beta(const NumericVector& y, const NumericMatrix& X, const NumericVector& xi, const NumericVector& beta_init, const NumericVector& u, double sigma_sq_eps, double sigma_sq_beta);
RcppExport SEXP _monotoneSIM_update_beta(SEXP ySEXP, SEXP XSEXP, SEXP xiSEXP, SEXP beta_initSEXP, SEXP uSEXP, SEXP sigma_sq_epsSEXP, SEXP sigma_sq_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sq_eps(sigma_sq_epsSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sq_beta(sigma_sq_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta(y, X, xi, beta_init, u, sigma_sq_eps, sigma_sq_beta));
    return rcpp_result_gen;
END_RCPP
}
// rtmvnormHMC
NumericMatrix rtmvnormHMC(int n, const NumericVector& mu, const NumericMatrix& Sigma, const NumericVector& x_init, const NumericMatrix& ff, const NumericVector& gg, int n_burn);
RcppExport SEXP _monotoneSIM_rtmvnormHMC(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP x_initSEXP, SEXP ffSEXP, SEXP ggSEXP, SEXP n_burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_init(x_initSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ff(ffSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnormHMC(n, mu, Sigma, x_init, ff, gg, n_burn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_monotoneSIM_g", (DL_FUNC) &_monotoneSIM_g, 3},
    {"_monotoneSIM_update_beta", (DL_FUNC) &_monotoneSIM_update_beta, 7},
    {"_monotoneSIM_rtmvnormHMC", (DL_FUNC) &_monotoneSIM_rtmvnormHMC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_monotoneSIM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
